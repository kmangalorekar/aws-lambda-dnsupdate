import json
import boto3
import urllib3


def lambda_handler(event, context):
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager'
    )
    secretid = '<secretID>' # secret ID to access third party
    get_secret_value_response = client.get_secret_value(SecretId=secretid)
    secret = get_secret_value_response['SecretString']
    secret = json.loads(secret.replace("\'", "\""))
    
    instance_id = event["detail"]["instance-id"]
    count=0
    while True: # TO ensure private IP is generated by instance
         try:
            if count>20:
                break
            ec2 = boto3.resource('ec2')
            instance = ec2.Instance(instance_id)
            ip = instance.private_ip_address
            tags = instance.tags
            break
        except Exception as e:
            count+=1    
            continue
    
    for tag in tags:
        if tag['Key']=='Name':
            host = tag['Value']+'.utdallas.edu'
    print(host,ip,sep=" ")
    host_instance = instance_id + '.utdallas.edu'
    print(host_instance,ip,sep=" ")    
    state = event["detail"]["state"]
    
    
    http = urllib3.PoolManager()
    headers = urllib3.make_headers(basic_auth=secretid+':'+secret['password'])
    headers['content-Type']='application/json'
    
    
    
    print("State code: ", instance.state)

    if state == "pending": #add additional checks for running state
        #infoblox api call for getting dns entry with ip and hostname
        entry_data = {"name":host, "ipv4addrs":[{"ipv4addr":ip}], "comment":"Created by Lambda API Call"}
        entry_data2 = {"name":host_instance, "ipv4addrs":[{"ipv4addr":ip}], "comment":"Created by Lambda API Call"}
        encoded_data = json.dumps(entry_data).encode('utf-8')
        encoded_data_instance = json.dumps(entry_data2).encode('utf-8')
        try:
            response_instance = http.request('POST', 'https://<hostname>/wapi/v2.10/record:host?_return_fields%2B=name,ipv4addrs&_return_as_object=1',body=encoded_data_instance, headers=headers)
            print (response_instance.data)    
        except Exception as e:
            print(e)
            print(response_instance.data)

    elif state == "terminated":
        #infoblox api call to delete dns entry with ip and hostname
        print("Call to infoblox to delete record")
        r1 = http.request('GET', 'https://<hostname>/wapi/v2.10/record:host?name='+host_instance+'&_return_as_object=1',headers=headers)
        x1 = json.loads(r1.data)
        ip_instance = x1["result"][0]["ipv4addrs"][0]["ipv4addr"] # get IP address of the entry
        
        #r1 = http.request('GET', 'https://<hostname>/wapi/v2.10/record:host?name='+host_instance+'&_return_as_object=1',headers=headers)
        r = http.request('GET', 'https://<hostname>/wapi/v2.10/search?address='+ip_instance+'&_return_as_object=1',headers=headers) # query to get all hostnames records from ip
        x = json.loads(r.data)
        
        for i in x["result"]: # get record id and hostname for each and delete individually
            record = i["_ref"].split('host/')[1].split(':')[0]
            host = i["_ref"].split('host/')[1].split(':')[1].split("/")[0]
            response_instance = http.request('DELETE', 'https://<hostname>/wapi/v2.10/record:host/' + record + ':' + host +'/default?_return_as_object=1', headers=headers)
            print(response_instance.data)
        
    return {
        'statusCode': response_instance.status,
        'body': json.loads(response_instance.data)
    }

